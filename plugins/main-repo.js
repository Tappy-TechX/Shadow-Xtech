const fetch = require('node-fetch');
const config = require('../config');
const { cmd } = require('../command');

const whatsappChannelLink = 'https://whatsapp.com/channel/0029VasHgfG4tRrwjAUyTs10';

cmd({
    pattern: "repo",
    alias: ["sc", "script", "info"],
    desc: "Fetch GitHub repository information with random styles.",
    react: "üìÇ",
    category: "info",
    filename: __filename,
},
async (conn, mek, m, { from, reply }) => {
    const githubRepoURL = 'https://github.com/Tappy-Black/Shadow-Xtech-V1';

    const randomImageUrls = [
        "https://files.catbox.moe/etqc8k.jpg",
        "https://files.catbox.moe/0w7hqx.jpg",
        "https://files.catbox.moe/95n1x6.jpg",
        "https://files.catbox.moe/og4tsk.jpg"
    ];

    const quotes = [
    "Open-source & powerful. Fork now. üöÄ‚ú®",
    "Built for scale. Clone the future. üß©üõ†Ô∏è",
    "Your bot starts here. Check the repo. ü§ñüìÇ",
    "Transparency at its core. View code. üîçüîì",
    "Modular. Fast. Yours to fork. ‚ö°üîß",
    "Stars welcome, forks loved! üåüüç¥",
    "Contribute today. Code is live. üíªüî•",
    "Stable & sleek ‚Äî repo tells all. üìäüß™",
    "Every byte matters. Fork the repo. üß†üìÅ",
    "Shadow-Xtech lives in this repo. üëëüõ°Ô∏è"
];

    const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];

    try {
        const [, username, repoName] = githubRepoURL.match(/github\.com\/([^/]+)\/([^/]+)/);
        const response = await fetch(`https://api.github.com/repos/${username}/${repoName}`);
        if (!response.ok) throw new Error(`GitHub API error: ${response.status}`);

        const repoData = await response.json();
        const selectedImageUrl = getRandomElement(randomImageUrls);
        const selectedQuote = getRandomElement(quotes);

        const formatDate = (dateString) => {
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        };

        const styles = [
            `‚ï≠‚îÄ‚îÄ‚îÄ„Äé ${config.BOT_NAME} REPO „Äè‚îÄ‚îÄ‚îÄ‚≥π
‚îÇ üì¶ *Repository*: ${repoData.name}
‚îÇ üëë *Owner*: ${repoData.owner.login}
‚îÇ ‚≠ê *Stars*: ${repoData.stargazers_count}
‚îÇ ‚ëÇ *Forks*: ${repoData.forks_count}
‚îÇ üîó *URL*: ${repoData.html_url}
‚îÇ üìù *Desc*: ${repoData.description || 'None'}
‚îÇ üí¨ _"${selectedQuote}"_
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≥π
> ${config.DESCRIPTION}`,

            `‚Ä¢----[ GITHUB INFO ]----‚Ä¢
  üè∑Ô∏è ${repoData.name}
  üë§ ${repoData.owner.login}
  ‚ú® ${repoData.stargazers_count} Stars
  ‚ëÇ ${repoData.forks_count} Forks
  üí¨ _"${selectedQuote}"_
‚Ä¢----[ ${config.BOT_NAME} ]----‚Ä¢
> ${config.DESCRIPTION}`,

            `‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ REPOSITORY INFO ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ñÑ
‚ô¢ *Project*: ${repoData.name}
‚ô¢ *Author*: ${repoData.owner.login}
‚ô¢ *Stars*: ${repoData.stargazers_count} ‚ú®
‚ô¢ *Forks*: ${repoData.forks_count} ‚ëÇ
‚ô¢ *Updated*: ${formatDate(repoData.updated_at)}
üîó ${repoData.html_url}
üí¨ _"${selectedQuote}"_
> ${config.DESCRIPTION}`,

            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚ö° ${config.BOT_NAME} REPO  ‚ö°  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚Ä¢ Name: ${repoData.name}
‚îÇ ‚Ä¢ Owner: ${repoData.owner.login}
‚îÇ ‚Ä¢ Stars: ${repoData.stargazers_count}
‚îÇ ‚Ä¢ Forks: ${repoData.forks_count}
‚îÇ ‚Ä¢ URL: ${repoData.html_url}
‚îÇ ‚Ä¢ Desc: ${repoData.description || 'None'}
‚îÇ ‚Ä¢ Quote: "${selectedQuote}"
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
> ${config.DESCRIPTION}`,

            `‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ REPO INFO ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞
üè∑Ô∏è  *${repoData.name}*
üë®‚Äçüíª  ${repoData.owner.login}
‚≠ê ${repoData.stargazers_count}  ‚ëÇ ${repoData.forks_count}
üîó ${repoData.html_url}
üìú ${repoData.description || 'No description'}
üí¨ _"${selectedQuote}"_
> ${config.DESCRIPTION}`,

            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ${config.BOT_NAME} REPO    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë > NAME: ${repoData.name}
‚ïë > OWNER: ${repoData.owner.login}
‚ïë > STARS: ${repoData.stargazers_count}
‚ïë > FORKS: ${repoData.forks_count}
‚ïë > URL: ${repoData.html_url}
‚ïë > DESC: ${repoData.description || 'None'}
‚ïë > QUOTE: "${selectedQuote}"
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
> ${config.DESCRIPTION}`,

            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üìÇ  REPO  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ *Project*: ${repoData.name}
‚îÇ *Author*: ${repoData.owner.login}
‚îÇ ‚ú® ${repoData.stargazers_count} Stars
‚îÇ ‚ëÇ ${repoData.forks_count} Forks
‚îÇ üîó ${repoData.html_url}
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üìù  DESC  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
${repoData.description || 'No description'}
üí¨ _"${selectedQuote}"_
> ${config.DESCRIPTION}`,

            `‚ú¶ ${config.BOT_NAME} Repository ‚ú¶
üìå *${repoData.name}*
üë§ @${repoData.owner.login}
‚≠ê ${repoData.stargazers_count} | ‚ëÇ ${repoData.forks_count}
üîÑ Last updated: ${formatDate(repoData.updated_at)}
üîó GitHub: ${repoData.html_url}
${repoData.description || 'No description available'}
üí¨ _"${selectedQuote}"_
> ${config.DESCRIPTION}`,

            `‚ïî‚ô´‚ïêüéß‚ïê‚ô´‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   ${config.BOT_NAME} REPO
‚ïö‚ô´‚ïêüéß‚ïê‚ô´‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
‚Ä¢„Éª„Çú„Çú„Éª* ‚úß
 ‚úß *Name*: ${repoData.name}
 ‚úß *Owner*: ${repoData.owner.login}
 ‚úß *Stars*: ${repoData.stargazers_count}
 ‚úß *Forks*: ${repoData.forks_count}
‚Ä¢„Éª„Çú„Çú„Éª* ‚úß
üîó ${repoData.html_url}
${repoData.description || 'No description'}
üí¨ _"${selectedQuote}"_
> ${config.DESCRIPTION}`,

            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  REPOSITORY REPORT  ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
‚óà Project: ${repoData.name}
‚óà Maintainer: ${repoData.owner.login}
‚óà Popularity: ‚òÖ ${repoData.stargazers_count} | ‚ëÇ ${repoData.forks_count}
‚óà Last Update: ${formatDate(repoData.updated_at)}
‚óà URL: ${repoData.html_url}
Description:
${repoData.description || 'No description provided'}
Insight: _"${selectedQuote}"_
> ${config.DESCRIPTION}`
        ];

        const selectedStyle = getRandomElement(styles);
        const finalImageUrl = config.MENU_IMAGE_URL || selectedImageUrl;

        const quotedContact = {
            key: {
                fromMe: false,
                participant: "0@s.whatsapp.net",
                remoteJid: "status@broadcast"
            },
            message: {
                contactMessage: {
                    displayName: config.OWNER_NAME || "System Repo | Verified ‚úÖ",
                    vcard: "BEGIN:VCARD\nVERSION:3.0\nFN:ShadowXTech\nORG:Bot Repo;\nTEL;type=CELL:+1234567890\nEND:VCARD"
                }
            }
        };

        await conn.sendMessage(from, {
            image: { url: finalImageUrl },
            caption: selectedStyle,
            contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: true,
                externalAdReply: {
                    title: "‚öôÔ∏è SHADOW-XTECH | SYSTEM CORE",
                    body: "Bot is live and operational ‚Äî stay connected!",
                    thumbnailUrl: "https://files.catbox.moe/3l3qgq.jpg",
                    sourceUrl: whatsappChannelLink,
                    mediaType: 1,
                    renderLargerThumbnail: false
                },
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363369453603973@newsletter',
                    newsletterName: config.OWNER_NAME || 'ùêí ú·¥Ä·¥Ö·¥è·¥°-ùêó·¥õ·¥á·¥Ñ ú',
                    serverMessageId: 143
                }
            }
        }, { quoted: quotedContact });

        await conn.sendMessage(from, {
            audio: { url: 'https://files.catbox.moe/ddmjyy.mp3' },
            mimetype: 'audio/mp4',
            ptt: true,
            contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: true
            }
        }, { quoted: mek });

    } catch (error) {
        console.error("Repo command error:", error);
        reply(`‚ùå Error: ${error.message}`);
    }
});