const config = require('../config')
const { cmd, commands } = require('../command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions')

cmd({
    pattern: "tagall",
    react: "üì°",
    alias: ["gc_tagall"],
    desc: "To Tag all Members",
    category: "group",
    use: '.tagall [message]',
    filename: __filename
},
async (conn, mek, m, { from, participants, reply, isGroup, senderNumber, groupAdmins, prefix, command, args, body }) => {
    try {
        if (!isGroup) return reply("‚õî *Access Denied!*üìç *This protocol can only be executed inside group environments.*");

        const botOwner = conn.user.id.split(":")[0];
        const senderJid = senderNumber + "@s.whatsapp.net";

        if (!groupAdmins.includes(senderJid) && senderNumber !== botOwner) {
            return reply("üîê *Unauthorized Access!*üõ°Ô∏è *Only admins or the Supreme Core Operator may deploy this protocol.*");
        }

        let groupInfo = await conn.groupMetadata(from).catch(() => null);
        if (!groupInfo) return reply("‚ö†Ô∏è *System Fault!*. *Failed to interface with group metadata core.*");

        const groupName = groupInfo.subject || "Unknown User";
        const totalMembers = participants ? participants.length : 0;
        if (totalMembers === 0) return reply("üö´ *Zero User Found in Current Node!*");

        let emojis = ['üì°', 'üîä', '‚ö°', 'üö®', 'üß¨', 'ü™ê', 'üí†', 'üéØ', 'üîó', 'üõ†Ô∏è', 'üåÄ', 'üíª', 'üîß', 'üî≠', '‚è≥', 'üóø', 'üöÄ', 'üéß', 'ü™Ä', 'üçÅ', 'üó£Ô∏è', 'üëª', '‚ö†Ô∏è', 'üî•'];
        let randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

        let message = body.slice(body.indexOf(command) + command.length).trim();
        if (!message) message = "‚ö° All Members ‚Äî Status Sync Required!";

        let teks = `
‚éæ‚¶ø========================================‚èå
  üõ∞Ô∏è *TAG ALL MODULE ‚Äî BROADCAST MODE*
‚éø==========================================‚èã

  üåê *GROUP NAME*   : ${groupName}
  üë§ *TOTAL MEMBERS*  : ${totalMembers}
  üí¨ *TAGGED MESSAGE* : ${message}

 ‚ßâ *MENTION PROTOCOL INITIATED...*
`;

        for (let mem of participants) {
            if (!mem.id) continue;
            teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
        }

        teks += `
‚éæ==========================================‚èå
  ‚öôÔ∏è *TRANSMISSION CORE*[SHADOW-XTECH]
‚éø==========================================‚èã`;

        conn.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: mek });

    } catch (e) {
        console.error("TagAll Error:", e);
        reply(`‚ùå *SYSTEM FAILURE DETECTED!*üßæ *Error Trace:*${e.message || e}`);
    }
});